package com.github.entercode;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;

import javax.swing.ImageIcon;
import javax.swing.JPanel;

public class GameWindow extends JPanel implements Runnable {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Point pos;
	private Image man;
	private Thread animator;
	
	private int DELAY = 25;
	private long beforeTime, timeDiff, sleep;
	
	public GameWindow() {
	
		pos = new Point(30, 30);
		setBackground(Color.BLACK);
		setPreferredSize(new Dimension(640, 320));
		setDoubleBuffered(true);
		setVisible(true);
		
		loadImage();
		
/*		
 * Old Method javax.swing.Timer
		timer = new Timer(25, this);
		timer.start();
*/
		
//		timer = new Timer();
//		timer.scheduleAtFixedRate(new ScheduledTask(), INITIAL_DELAY, PERIOD_INTERVAL);
//		
	}
	
	
	// Render method
	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		drawMan(g);
	}
	
	private void loadImage() {

        ImageIcon ii = new ImageIcon("test.png");
        man = ii.getImage();
    }
	
	private void drawMan(Graphics g) {
		g.drawImage(man, pos.x, pos.y, this);
        Toolkit.getDefaultToolkit().sync();
	}
	
	/*private class ScheduledTask extends TimerTask {

		// Update
		@Override
		public void run() {
			pos.x += 1;
			pos.y += 1;
			
			if (pos.x > 640 || pos.y > 320) {
				pos.x = 0;
				pos.y = 0;
			}
			
			repaint();
		}
		
	}*/
	
	// Update
	private void update() {
		pos.x += 1;
		pos.y += pos.y + 1;
		
		if (pos.x > 640 || pos.y > 320) {
			pos.x = 0;
			pos.y = 0;
		}
	}
	
	@Override
	public void addNotify() {
		System.out.println("[Notify] ");
		super.addNotify();
		
		animator = new Thread(this);
		animator.start();
		
	}

	@Override
	public void run() {
		
		
		beforeTime = System.currentTimeMillis();
		
		while (true) {
			
			// アップデート
			update();
			
			// レンダリング
			repaint();
			
			// 前の時刻からの時間差（前の処理にかかった時間）
			timeDiff = System.currentTimeMillis() - beforeTime;
			
			// 1フレームの時間からかかった処理時間を引いたもの
			sleep = DELAY - timeDiff;
			
			// 1フレームをオーバーした時にレンダリングをスキップ
			if (sleep < 0) {
				sleep = 2;
			}
	
			// 処理後に余った時間の間スリープ
			try {
				Thread.sleep(sleep);
			} catch (InterruptedException e) {
				System.out.println("Interrupted: " + e.getMessage());
			}
			
			beforeTime = System.currentTimeMillis();
		}
	}
}
